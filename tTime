local _hostname, _timeLeftToPlay, _postFrequencySeconds, mon = "https://localhost", 0, 120, null


os.loadAPI("mc/json")

--************************************************
--* HTTP STUFF                                   *
--************************************************

function httpGetList(listName)
  str = http.get(_hostname .. "/lists/" .. listName).readAll()
  obj = json.decode(str)
  return obj
end

function httpGetLastLog()
  str = http.get(_hostname .. "/playlogs/last").readAll()
  obj = json.decode(str)
  return obj
end

function httpGetStartStatus()
  str = http.get(_hostname .. "/status").readAll()
  obj = json.decode(str)
  return obj
end

function httpPostLog(obj)
	str = json.encode(obj) 
	headers = {}
	headers["Content-Type"] = "application/json"
	ret = http.post(_hostname .. "/playlogs",str, headers).readAll()
  obj = json.decode(ret)
  return obj
end

--************************************************
--* WRITING HELPERS                              *
--************************************************

function SetUpMonitor()
  mon = peripheral.wrap("left")
	mon.setTextScale(2)
end

function WriteGameTime()

  local time = os.time()
  local formattedTime = textutils.formatTime(time, false)
  
	mon.setCursorPos(1,14)
	mon.write("-----------------------------------")
	mon.setCursorPos(1,16)
	mon.write(" Game: "..formattedTime .. "  ")
end

function WriteTimeLeftMins(mins)
	WriteTimeLeft(mins*60)
end

function WriteTimeLeft(leftSeconds)
	WriteGameTime()
	mon.setCursorPos(21,16)
	mon.write("Left: ".. SecondsToPrettyTime(leftSeconds))
end

function WriteList(listName)
	mon.clear()
 	mon.setCursorPos(1,1)
	mon.write("          " .. listName .. " list")
 	mon.setCursorPos(1,2)
	mon.write("-----------------------------------")
  list = httpGetList(listName)

 	n=1
 	while n < 11 do
 		mon.setCursorPos(1,n+2)
		if list[n] == nil then break end
   	mon.write(n .. " - " .. list[n]["name"])
 	  n=n+1
  end
end

--************************************************
--* PLAYLOG SAVING                               *
--************************************************

function SaveLog(secs)
	return SaveLogMins(secs/60)
end

function SaveLogMins(mins)
	print("Posting: ".. mins .. " minutes left")
	log = GetPlayLogObject(math.floor(mins))
	return httpPostLog(log)
end

function GetPlayLogObject(mins)
	local playlog = {}
	playlog.timeleft=mins
	playlog.gametime=0
	return playlog
end

--************************************************
--* TIME HELPERS                                 *
--************************************************

function SecondsToPrettyTime(secs)
   hr = string.format("%02d",math.floor(secs/60/60))
	 secs = secs - hr*60*60
   min = string.format("%02d",math.floor(secs/60))
	 secs = secs - min*60
   sec = string.format("%02d",math.fmod(secs, 60))
	 return hr .. ":" .. min .. ":" .. sec 
end

function SleepMins(mins)
	sleep(mins*60)
end



--************************************************
--*      MAIN PROCESSING                         *
--************************************************

function PlayGameLoop()
  print("starting PlayGameLoop")	
	timeToPlaySecs = _timeLeftToPlay*60
	print("_timeLeftToPlay " .. _timeLeftToPlay)
	for i=timeToPlaySecs, 0, -1 do
    sleep(1) 
		if math.fmod(i,_postFrequencySeconds) == 0 then
			status = SaveLog(i)
			if status.timeleft*60 > i then
				print("Adjusting timeleft from " .. i/60 .. " to " .. status.timeleft)
				_timeLeftToPlay = status.timeleft
				print("_timeLeftToPlay " .. _timeLeftToPlay)
				status = SaveLogMins(_timeLeftToPlay)
	  		WriteTimeLeftMins(_timeLeftToPlay)	
				return
			end
		end
	  WriteTimeLeft(i)
		WriteGameTime()
	end
	_timeLeftToPlay = 0
	ret = SaveLog(0)	
end

function main()
	
	SetUpMonitor()
	
	WriteTimeLeftMins(_timeLeftToPlay)
	WriteList("mc")

	while true do
	  status = httpGetStartStatus()
		_timeLeftToPlay = status.timeleft
	
		PlayGameLoop()
		SleepMins(2)
	end
end

main()



