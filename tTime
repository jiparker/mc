local _hostname, _timeLeftToPlay, _postFrequencySeconds, mon = "https://limitless-hollows-7191.herokuapp.com", 0, 300, null


os.loadAPI("mc/json")

function httpGetList(listName)
  str = http.get(_hostname .. "/lists/" .. listName).readAll()
  obj = json.decode(str)
  return obj
end

function httpGetLastLog()
  str = http.get(_hostname .. "/playlogs/last").readAll()
  obj = json.decode(str)
  return obj
end

function httpGetStartStatus()
  str = http.get(_hostname .. "/status").readAll()
  obj = json.decode(str)
  return obj
end

function httpPostLog(obj)
	str = json.encode(obj) 
	headers = {}
	headers["Content-Type"] = "application/json"
	ret = http.post(_hostname .. "/playlogs",str, headers).readAll()
  obj = json.decode(ret)
  return obj
end

function WriteCountDown(strTime)
	mon = peripheral.wrap("left")
	mon.setTextScale(2)
  mon.clear()
  mon.setCursorPos(1,1)
	mon.write(strTime)
  local time = os.time()
  local formattedTime = textutils.formatTime(time, false)
  mon.setCursorPos(1,2)
	mon.write(formattedTime)

end

function WriteList(listName)

  local time = os.time()
  local formattedTime = textutils.formatTime(time, false)

	mon.clear()
 	mon.setCursorPos(1,1)
	mon.write("          " .. listName .. " list")
 	mon.setCursorPos(1,2)
	mon.write("-----------------------------------")
  list = httpGetList(listName)

 	n=1
 	while n < 11 do
 		mon.setCursorPos(1,n+2)
   	mon.write(n .. list[n-1].name)
 	  n=n+1
  end

	mon.setCursorPos(1,14)
	mon.write("-----------------------------------")
	mon.setCursorPos(1,16)
	mon.write("   GameTime:  "..formattedTime)
	os.sleep(15)
end

function SaveLog(secs)
	Write("Posting: ".. secs/60 .. " minutes left")
	log = GetPlayLogObject(math.floor(secs/60))
	return httpPostLog(log)
end

function GetPlayLogObject(mins)
	local playlog = {}
	playlog.timeleft=mins
	playlog.gametime=0
	return playlog
end

function SecondsToPrettyTime(secs)
   hr = string.format("%02d",math.floor(secs/60/60))
	 secs = secs - hr*60*60
   min = string.format("%02d",math.floor(secs/60))
	 secs = secs - min*60
   sec = string.format("%02d",math.fmod(secs, 60))
	 return hr .. ":" .. min .. ":" .. sec 
end

function Write(msg)
	print(msg)
end

function AdjustPower(on)
		if _timeLeftToPlay < 1 then
			TurnPowerOff()
		else
			TurnPowerOn()
		end
end

function TurnPowerOff()
			Write("System Off")
end

function TurnPowerOn()
			Write("System On")
end

function PlayGameLoop()
	
	timeToPlaySecs = _timeLeftToPlay*60
	for i=timeToPlaySecs, 0, -1 do
    sleep(1) 
		if math.fmod(i,_postFrequencySeconds) == 0 then
			status = SaveLog(i)
			if status.timeleft*60 > i then
				_timeLeftToPlay = status.timeleft
				status = SaveLog(_timeLeftToPlay)
				break
			end
		end
	  WriteCountDown(WriteToDisplay(i))	
		--AdjustPower()
	end
	_timeLeftToPlay = 0
	ret = SaveLog(0)	
end

function main()
		
  mon = peripheral.wrap("left")
		mon.setTextScale(2)
	--status = httpGetStartStatus()
	--_timeLeftToPlay = status.timeleft

	while true do
		--GetToDoList()
		--PlayGameLoop()
		WriteList("mc")
		sleep(120)

	end
end

main()



